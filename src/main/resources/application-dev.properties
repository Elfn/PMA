#https://www.thomasvitale.com/spring-data-jpa-hibernate-java-configuration/

spring.datasource.url=jdbc:postgresql://localhost:5433/pmaSpringDb
spring.datasource.username=postgres
spring.datasource.password=root

#FOR AWS EC2 INSTANCE
#spring.datasource.url=${jdbcurl}
#spring.datasource.username= ${dbuser}
#spring.datasource.password=${dbpwd}

#spring.datasource.driver-class-name=org.postgresql.Driver

#TO AVOID RUNNING OF "Data.sql" file
spring.datasource.initialization-mode=never


#none => Here we dont want tables to be created by our java code
#validate => Allows to checks compliance between java class's attibutes and their equivalent table's columns in db
spring.jpa.hibernate.ddl-auto=none

# Fix Postgres JPA Error (Method org.postgresql.jdbc.PgConnection.createClob() is not yet implemented).
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.jpa.show-sql=true

#Turn to false because we are not in production
spring.thymeleaf.cache=false

application.name = ${namedev}
admin.password = ${adminPwd}


#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.datasource.url=jdbc:h2:mem:testdb

#To show sql in log
#spring.jpa.show-sql=true
#
#spring.thymeleaf.cache=false
#
##Environment variables
#application.name = ${namedev}

#That 3 lines define the correct order of DROP statements[MANDATORY TO EXECUTE TEST!!!!!!]
spring.jpa.properties.javax.persistence.schema-generation.database.action=drop-and-create
spring.jpa.properties.javax.persistence.schema-generation.drop-source=script-then-metadata
spring.jpa.properties.javax.persistence.schema-generation.drop-script-source=drop.sql

#POSTGRES Dialect
#Url of h2 db and make the test running exactly the same way than with POSTGRES application above test
#jdbc.url=jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1

#For AOP
#At the project level
logging.level.com.pma.app= DEBUG
#ONLY FOR WARNING IN CONSOLE LOGS
#At the root level
logging.level.root= WARN
logging.level.org.springframework=INFO
# INFO  > WARN > DEBUG , INFO is at most high level logging
logging.file.name=app.log
#logging.pattern.dateformat=yyyy-MM-dd

server.error.whitelabel.enabled=false


# we need the below property to turn off hibernate auto validation
# we are using constraints validation and customizing our data validation
# rules
spring.jpa.properties.javax.persistence.validation.mode=none
